一、标识符

	在.java源文件中可以自己起名的地方就是标识符(类名，变量名，方法名，接口名)
	
	命名规则: 1.标识符只能用数字、字母、下划线和美元符构成
			  2.标识符必须以字母、下划线和美元符开头，不能以数字开头
			  3.标识符不能是关键字
			  4.标识符严格区分大小写
			  5.标识符最好见名知意
			  6.标识符需要注意单词首字母的大小写问题
		
二、关键字:	关键字是Sun在开发Java语言时定义的具有特殊含义的字符序列，关键字都是小写的
	
三、字面值：1.一眼看上去就知道是多少的数据就是字面值，比如10、true、"abc"
			2.字面值在内存中占用空间，这块空间有数据类型和值
			3.如果只有字面值，没有命名，内存不能得到重复利用，比如两次执行这条语句:System.out.println(10);	
		
四、数据类型

	1)引用数据类型:非基本数据类型
	
	2)基本数据类型
	
					类型描述  	   关键字   字节数	位数	默认值
		1]			字节型  	 	byte      1      8       0
		2] 			短整形			short	  2		16       0
		3] 			整形			int		  4		32       0
		4]			长整型			long	  8		64		 0L
		5]			单精度浮点型    float     4		32       0.0f
		6]			双精度浮点型    double	  8		64       0.0d
		7]			字符型   		char	  2		16		 '\u0000'
		8]			布尔型			boolean   1		 8		 false
		
		1.整数型:byte，short，(char)，int，long
			
			long l1 = 123;属于自动类型转换
			long l2 = 123L;属于普通的赋值运算
			如果整数没有超出byte，short，char，int的取值范围，就可以直接将这个整数直接赋值   
			long l3 = 2147483647;
			long l4 = 2147483648L;整数型默认为int类型，但是这个数据本身已经超出了int的取值范围，所以必须加L，编译才能通过
			整数型三种表示方式:十进制、八进制(以0开头)、十六进制(以0x开头)
			

		2.浮点型(近似值):float(精度低)，double(精度高)
		
			浮点型默认为double类型，所以对float类型赋值时需要强制类型转换或者加F后缀
			NaN为非数，非数间不存在相等，所有的正无穷大都相等，负无穷大都相等，浮点数可以除0
			

		3.布尔类型:boolean
		
			boolean类型的数据只有两个值:true和false，没有1和0，主要用在逻辑运算和条件控制语句中
			

		4.字符型(字符编码和转义问题)
		
				字符编码方式是现实世界中的文字在计算机中的表示方式的转换规则，常见的有如下:
		
				ASCII										计算机最基本的编码方式，单字节编码，共128个字符
			
				ISO-8859-1									在ASCII码的基础上涵盖了大多数西欧语言字符，
															仍然是单字节编码，共256个，不支持中文
																					
				GB2312<GBK<GB18030							中国国标码，主要是汉字编码，这三种从容量上看是包含关系
			
				Unicode:UTF-8、UTF-16、UTF-32				万国码，统一了全世界上所有的字符编码
			
			字符采用的编码和解码不一致就会出现乱码
			斜线在java语言中有转义功能，\u后面跟的是Unicode编码，注意符号的转义问题	
			Java以UTF-16作为内存的字符存储格式
	
		5.基本数据类型的转换(boolean不能转换)
		
			默认转换
			
				byte，short，char，int类型做混合运算的时先各自转换成int类型再做运算，但如果有其他类型的话，默认先转换为容量最大的类型		
				转换规则:byte->short，char->int->long->float->double	
						 
			强制转换:大容量向小容量转换，需要强制类型转换，但是程序在运行阶段可能损失精度
			
五、运算符(不知道运算符的优先级就加括号)

	1)算数运算符: +、-、*、/、++、--、%
	
		1.运算符'/'的结果根据类型来判断是否为整数或小数
		
		2.'++'：++出现在变量的后面，先赋值后自加1、++出现在变量的前面，先自加1再赋值			
	

	2)关系运算符(运算结果为boolean类型):>、>=、<、<=、==、!=
	

	3)布尔运算符(布尔运算符两边的算子必须是布尔类型，整个表达式的运算结果也是一个布尔类型)
		
		1.	&   逻辑与		两边都是true，结果才是true
		2.	|	逻辑或		一边是true，结果就是true
		3.	!	逻辑非		取反，比如!true-->false
		4.	^	逻辑异或	两边只要是不一致就是true，如false^true-->true
		5.	&&	短路与		只要第一个算子结果是false，后边那个表达式就不会执行
		6.	||	短路或		只要第一个算子结果是true，后边那个表达式不会执行
		

	4)赋值运算符:=、+=、-=、*=、/=、%=
	
		byte i = 10;
		i = i + 10;编译无法通过
		i += 10;编译和运算都通过，扩展赋值运算符不改变运算结果的数据类型，但可能严重损失精度
		

	5)字符串连接运算符:+
		
		加法运算:如果全都是数字类型就执行
		字符串连接:只要有一个是字符串类型就执行，注意如果多个数字类型最先出现在前面还是会先做加法运算
	

	6)条件运算符(三目运算符):boolean表达式?表达式1:表达式2;
	
			boolean表达式的结果是true，则整个表达式的结果就是表达式1，相反则是表达式2
			cahr c=isSuccess?'S':"失败";不可以
			System.out.println(isSuccess?'S':"失败");可以，因为方法重载
	

六、控制语句(可以相互嵌套)

	1)控制选择结构语句:if、else if、switch
	
		1.if else语句
																			
			第一种结构:										
				if(boolean表达式){						
					java语句;										
				}
				
			第二种结构:
				if(boolean表达式){						
					java语句1;					在这些结构中只要有一个分支执行，则整个if语句结束，第一种和第三种结构也可能一个都不执行
				}else{							分支语句中，如果只有一条java语句，大括号可以省略，但不推荐
					java语句2;					
				}
				
			第三种结构:
				if(boolean表达式){
					java语句1;
				}else if(boolean表达式){
					java语句2;
				}......	
				
			第四种结构:
				if(boolean表达式){
					java语句1;
				}else if(boolean表达式){
					java语句2;
				}......
				}else{
					java语句3;
				}
				
		2.switch语句
		
			switch(int类型或字符串类型){		break和defalut语句都可以没有，如果没有break语句则发生case穿透现象
				case 对应的类型:				switch后面的括号中可以填写byte、short、char数据类型，因为会自动转换为int类型
					java语句;					switch在JDK5.0可以使用枚举，JDK7.0可以使用字符串										
					break;						case之间与default没有顺序，先判断所有的case，没有匹配的case就执行default
				case 对应的类型:				case合并现象，比如:case 'A':case 'B':case 'C':		
					java语句;					
					break;													
				case 对应的类型:
					java语句;											
					break;
				defalut:
					java语句;
			}
				
	2)控制循环结构语句:for、while、do while
		
		for循环	
		
			for(表达式1;表达式2;表达式3){
				java语句;
			}
			
				for循环先执行且只会执行一次表达式1，然后根据表达式2的结果，判断是否继续执行java语句，最后再执行表达式3，
				然后又判断表达式2的结果......当表达式2的结果为false就退出for循环，另外如果表达式1、2、3都为空则是死循环
			

		while循环:循环的次数是:0~N次
		
			while(boolean表达式){
				java语句;
			}
		
		do while循环:循环的次数是:1~N次
		
			do{
				java语句;
			}while(boolean表达式);
		

	3)改变控制语句:break、continue、return
		
		break语句
		
			break语句可以用来退出switch语句
			break语句可以用来结束一个循环，默认是结束离它最近那个循环

		continue语句用来跳过一次循环，默认也是跳过离它最近的那个循环
		
		return语句

			return语句可以用在无返回值类型的方法中结束方法
			return语句可以用在有返回值类型的方法中结束方法并返回数据
			return语句后不能直接跟其他代码
			

七、递归

	递归就是方法中调用自身，实际开发效率不高，尽量不使用
	递归必须要有结束条件
	
八、变量和方法

	1)变量
	
		定义变量会在内存中开辟一块空间:数据类型 变量名;
		变量赋值:变量名 = 值;
		变量的本质就是内存中的一块空间，这块空间有类型、名称和值
		变量必须定义并赋值后才能使用
		变量可以重新赋值，在同一个域中不能重新定义，但在不同域中可以再定义，相当于是另一个变量，这时使用变量就采用就近原则
		int i1，i2，i3 = 456;只有i3变量被赋值	
		变量出了大括号就不认识了
		
		8.变量的类型
		
			局部变量:在方法中声明的变量叫做局部变量，包括形式参数列表，不能被static和访问权限修饰符修饰
			
			成员变量(实例变量，非静态变量):在类体中，方法之外声明的变量统称成员变量
			
				成员变量只能通过对象访问，不能通过类直接访问成员变量
				使用一个空的引用去访问成员，编译可以通过，但运行阶段会抛空指针异常，但访问静态数据时不会出现空指针异常
				成员变量在类对象创建时会被自动赋予默认值
			
			静态变量:被static关键字修饰的变量
			
				静态变量在类加载阶段被赋值，不手动赋值则采用默认值，在本类中调用时可以省略类名
				如果一个类的所有对象都有一个值相同的属性，就可以使用static修饰这个属性来使它存放在方法区中，节省内存
			
	2)方法
	
		访问权限修饰符 返回值类型 方法名(形式参数列表){
			方法体;
		}
	
		方法是一段可以重复使用的代码片段，可以通过接收不同的数据得到不同的结果
		
		如果方法没有任何返回值，那么用void作为返回值类型，但如果有返回值，就必须使用return语句返回对应的类型数据
		方法的形式参数列表，可以没有参数，多个参数间使用逗号隔开
		
		方法的类型
		
			成员方法:只能通过对象来调用
			
			静态方法:被static修饰方法，在本类调用时可以省略类名
			
				静态方法中不能直接访问非静态数据
				静态方法可以使用类名.的方式调用，也可以用引用.，但即使用的是引用.，运行时还是用的类名.，
					编译阶段会判断出引用的对象属于这个类，所以就算这个引用为空，也不会出现空指针异常
				一般情况下工具类中的方法大部分都是静态方法
				
		方法的形式参数列表中起决定性作用的是参数的类型和顺序
		方法只有在被调用的时候(压栈)，才会在内存(栈内存)中给该方法分配空间
	
		方法的重载(Overload)
		
			在同一个类中，两个或多个方法的方法名相同，参数列表的类型、个数、顺序有不同，就会发生重载，所以一个类里面可以有两个main()方法